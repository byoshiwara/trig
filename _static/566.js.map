{"version":3,"file":"566.js","mappings":"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","sources":["webpack://WebComponents/./runestone/matching/js/matching.js","webpack://WebComponents/./runestone/matching/js/xmlconversion.js"],"sourcesContent":["import RunestoneBase from \"../../common/js/runestonebase.js\";\nimport \"../css/matching.less\";\nimport { xmlToJson } from \"./xmlconversion.js\";\nclass MatchingProblem extends RunestoneBase {\n    constructor(container, boxData, opts) {\n        super({})\n        this.containerDiv = container;\n        this.divid = container.id;\n        this.boxData = boxData;\n        this.boxesRenderedPromise = new Promise((resolve) => {\n            this.boxesRenderedResolve = resolve;\n        });\n        this.workspace = this.createWorkspace(container);\n        this.statement = this.createStatement(container);\n        this.connList = this.createConnList(container);\n        this.ariaLive = this.createAriaLive(container);\n        this.controlDiv = this.createControlDiv(container);\n        this.createHelpModal();\n\n        this.connections = [];\n        this.allBoxes = [];\n        this.selectedBox = null;\n        this.startBox = null;\n        this.tempLine = null;\n        this.useRunestoneServices = eBookConfig.useRunestoneServices;\n        this.graderactive = opts.graderactive || false;\n        this.init();\n        // ensure that boxes are rendered before checking server\n        // if boxes are not rendered then we may have dangling lines\n        // that are not connected to any boxes\n        this.boxesRenderedPromise.then(() => {\n            this.checkServer(\"matching\", true);\n        });\n    }\n\n    init() {\n        this.shuffle(this.boxData.left);\n        this.shuffle(this.boxData.right);\n\n        this.renderBoxes();\n        this.attachEvents();\n\n        if (window.MathJax && MathJax.typesetPromise) {\n            MathJax.typesetPromise();\n        }\n    }\n\n    // required elements for a Runestone component\n\n    checkCurrentAnswer() {\n        const correctAnswers = this.boxData.correctAnswers;\n        const actual = this.connections.map(conn => [\n            conn.fromBox.dataset.id,\n            conn.toBox.dataset.id\n        ]);\n\n        const correctMatches = correctAnswers.filter(expected =>\n            actual.some(given => given[0] === expected[0] && given[1] === expected[1])\n        );\n\n        const incorrectConnections = actual.filter(given =>\n            !correctAnswers.some(expected => expected[0] === given[0] && expected[1] === given[1])\n        );\n\n        this.correctCount = correctMatches.length;\n        this.incorrectCount = incorrectConnections.length;\n        this.missingCount = correctAnswers.length - this.correctCount;\n        this.denominator = this.correctCount + this.incorrectCount + this.missingCount;\n        this.scorePercent = this.denominator === 0 ? 0 : Math.max(0, Math.min(100, Math.round((this.correctCount / this.denominator) * 100)));\n\n    }\n\n    async logCurrentAnswer(eventData) {\n        eventData.event = \"matching\";\n        eventData.div_id = this.divid;\n        eventData.act = `score:${eventData.score} connections:${JSON.stringify(eventData.connections)}`;\n        eventData.correct = eventData.score === 100;\n        eventData.answer = JSON.stringify({ connections: eventData.connections });\n\n        await this.logBookEvent(eventData);\n\n    }\n\n    renderFeedback() {\n        this.connections.forEach(conn => {\n            const idPair = [conn.fromBox.dataset.id, conn.toBox.dataset.id];\n            const isCorrect = this.boxData.correctAnswers.some(expected =>\n                expected[0] === idPair[0] && expected[1] === idPair[1]\n            );\n            conn.line.classList.remove(\"correct\", \"incorrect\");\n            conn.line.classList.add(isCorrect ? \"correct\" : \"incorrect\");\n        });\n\n        this.connList.innerHTML = `<strong>Score: ${this.scorePercent}%</strong><br>`;\n        this.connList.innerHTML += `<br>Correct: ${this.correctCount}`;\n        this.connList.innerHTML += `<br>Incorrect: ${this.incorrectCount}`;\n        this.connList.innerHTML += `<br>Missing: ${this.missingCount}`;\n        if (this.scorePercent !== 100) {\n            this.connList.innerHTML += `<div class=\"match_feedback\"><strong>Feedback:</strong> ${this.boxData.feedback}</div>`;\n        }\n    }\n\n    createStatement(container) {\n        const statement = document.createElement('div');\n        statement.className = 'statement';\n        statement.classList.add('match_question');\n        statement.innerHTML = this.boxData.statement;\n        container.insertBefore(statement, container.firstChild);\n        return statement;\n    }\n\n\n    restoreAnswers(data) {\n        // Recreate lines\n        if (data) {\n            this.connections = data.answer.connections.map(conn => ({\n                fromBox: this.allBoxes.find(box => box.dataset.id === conn.from),\n                toBox: this.allBoxes.find(box => box.dataset.id === conn.to)\n            }));\n            this.updateConnectionModel();\n            this.correct = data.correct;\n        }\n        this.connections.forEach(conn => {\n            const from = this.getRightBoxCenter(conn.fromBox);\n            const to = this.getLeftBoxCenter(conn.toBox);\n            const line = this.createLineElement(from.x, from.y, to.x, to.y);\n            line.fromBox = conn.fromBox;\n            line.toBox = conn.toBox;\n            this.svg.appendChild(line);\n            conn.line = line;\n        });\n\n    }\n    checkLocalStorage() {\n        if (this.graderactive) {\n            return;\n        }\n        const data = localStorage.getItem(this.divid);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            this.connections = parsedData.connections.map(conn => ({\n                fromBox: this.allBoxes.find(box => box.dataset.id === conn.from),\n                toBox: this.allBoxes.find(box => box.dataset.id === conn.to)\n            }));\n            this.updateConnectionModel();\n            this.correctCount = parsedData.correctCount;\n            this.incorrectCount = parsedData.incorrectCount;\n            this.missingCount = parsedData.missingCount;\n            this.scorePercent = parsedData.score;\n            this.restoreAnswers();\n            this.renderFeedback();\n        }\n    }\n    setLocalStorage() {\n        const data = {\n            connections: this.connections.map(conn => ({\n                from: conn.fromBox.dataset.id,\n                to: conn.toBox.dataset.id\n            })),\n            score: this.scorePercent,\n            correctCount: this.correctCount,\n            incorrectCount: this.incorrectCount,\n            missingCount: this.missingCount\n        };\n        localStorage.setItem(this.divid, JSON.stringify(data));\n    }\n\n    disableInteraction() { }\n\n    createWorkspace(container) {\n        const workspace = document.createElement('div');\n        workspace.className = 'matching-workspace';\n\n        const leftColumn = document.createElement('div');\n        leftColumn.className = 'left-column';\n        this.leftColumn = leftColumn;\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svg.classList.add('connector-svg');\n        this.svg = svg;\n\n        const rightColumn = document.createElement('div');\n        rightColumn.className = 'right-column';\n        this.rightColumn = rightColumn;\n        workspace.appendChild(leftColumn);\n        workspace.appendChild(svg);\n        workspace.appendChild(rightColumn);\n\n        container.insertBefore(workspace, container.firstChild);\n        return workspace;\n    }\n\n    createConnList(container) {\n        const connList = document.createElement('div');\n        connList.className = 'conn-list';\n        connList.innerHTML = \"<strong>Connections:</strong><br>\";\n        container.appendChild(connList);\n        return connList;\n    }\n\n    createAriaLive(container) {\n        const ariaLive = document.createElement('div');\n        ariaLive.className = 'aria-live';\n        ariaLive.setAttribute('aria-live', 'polite');\n        ariaLive.setAttribute('aria-atomic', 'true');\n        container.appendChild(ariaLive);\n        return ariaLive;\n    }\n\n    createControlDiv(container) {\n        const controlDiv = document.createElement('div');\n        controlDiv.className = 'control-div';\n        const gradeBtn = document.createElement('button');\n        gradeBtn.className = 'grade-button';\n        gradeBtn.textContent = 'Check Me';\n        const resetBtn = document.createElement('button');\n        resetBtn.className = 'reset-button';\n        resetBtn.textContent = 'Reset';\n        // add Help button\n        const helpBtn = document.createElement('button');\n        helpBtn.className = 'help-button';\n        helpBtn.textContent = '?';                     // changed from 'Help'\n        helpBtn.setAttribute('aria-label', 'Help');    // accessible label\n        controlDiv.appendChild(gradeBtn);\n        controlDiv.appendChild(resetBtn);\n        controlDiv.appendChild(helpBtn);\n        container.appendChild(controlDiv);\n\n        // events\n        gradeBtn.addEventListener('click', () => this.gradeConnections());\n        resetBtn.addEventListener('click', () => this.resetConnections());\n        helpBtn.addEventListener('click', () => this.showHelp());\n        return controlDiv;\n    }\n\n    createHelpModal() {\n        this.helpModal = document.createElement('div');\n        this.helpModal.className = 'help-modal';\n        const text = `<p>Click and drag between boxes to create connections.</p>\n        <p>Use the tab key to navigate to a box and press Enter to select the box.  Then tab to the connecting box and press Enter to create a connection between the two selected boxes.</p>\n        <p>Click on a connection line to remove it. You can also use the tab key to select lines.  Press the delete key to remove a selected line.</p>\n        <p>Click the \"Check Me\" button to check your connections, and save your work.</p>\n        <p>Click the \"Reset\" button to clear all connections.</p>`\n\n        this.helpModal.innerHTML = `\n          <div class=\"help-modal-content\">\n            <button class=\"help-close\">&times;</button>\n            <div class=\"help-text\">${text}</div>\n          </div>`;\n        this.containerDiv.appendChild(this.helpModal);\n        this.helpModal.querySelector('.help-close')\n            .addEventListener('click', () => this.hideHelp());\n    }\n\n    showHelp() {\n        this.helpModal.style.display = 'flex';\n    }\n\n    hideHelp() {\n        this.helpModal.style.display = 'none';\n    }\n\n    // Utility functions\n    shuffle(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n    renderBoxes() {\n        this.boxData.left.forEach(({ id, label }) => {\n            const box = this.createBox(id, label, \"drag\");\n            this.leftColumn.appendChild(box);\n            this.allBoxes.push(box);\n        });\n\n        this.boxData.right.forEach(({ id, label }) => {\n            const box = this.createBox(id, label, \"drop\");\n            this.rightColumn.appendChild(box);\n            this.allBoxes.push(box);\n        });\n\n        const imgs = Array.from(this.workspace.querySelectorAll('img'));\n        if (imgs.length === 0) {\n            this.boxesRenderedResolve();\n        }\n        // Wait for all images to load before resolving the promise\n        const imgPromises = imgs.map(img => {\n            if (typeof img.decode === 'function') {\n                return img.decode();\n            }\n            if (img.complete && img.naturalWidth !== 0) {\n                return Promise.resolve();\n            }\n            return new Promise((resolve) => {\n                img.addEventListener('load', () => resolve());\n                img.addEventListener('error', () => resolve());\n            });\n        });\n\n        Promise.all(imgPromises).then(() => {\n            this.boxesRenderedResolve();\n        });\n    }\n\n    createBox(id, label, role) {\n        const div = document.createElement('div');\n        div.className = 'box';\n        div.dataset.id = id;\n        div.dataset.role = role;\n        div.innerHTML = label;\n        div.tabIndex = 0;\n        div.setAttribute('role', 'button');\n        div.setAttribute('aria-label', `${role === \"drag\" ? \"Draggable\" : \"Droppable\"}: ${label}`);\n        return div;\n    }\n\n    getCenter(el) {\n        const elRect = el.getBoundingClientRect();\n        const containerRect = this.workspace.getBoundingClientRect();\n        return {\n            x: elRect.left - containerRect.left + elRect.width / 2,\n            y: elRect.top - containerRect.top + elRect.height / 2\n        };\n    }\n\n    getRightBoxCenter(el) {\n        const elRect = el.getBoundingClientRect();\n        const containerRect = this.workspace.getBoundingClientRect();\n        return {\n            x: elRect.left - containerRect.left + elRect.width,\n            y: elRect.top - containerRect.top + elRect.height / 2\n        };\n    }\n    getLeftBoxCenter(el) {\n        const elRect = el.getBoundingClientRect();\n        const containerRect = this.workspace.getBoundingClientRect();\n        return {\n            x: elRect.left - containerRect.left,\n            y: elRect.top - containerRect.top + elRect.height / 2\n        };\n    }\n\n    createLineElement(x1, y1, x2, y2) {\n        const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        line.setAttribute(\"x1\", x1);\n        line.setAttribute(\"y1\", y1);\n        line.setAttribute(\"x2\", x2);\n        line.setAttribute(\"y2\", y2);\n        line.setAttribute(\"class\", \"line\");\n        line.setAttribute(\"tabindex\", \"0\"); // Make the line focusable\n        line.setAttribute(\"focusable\", \"true\"); // Make the line focusable\n        line.setAttribute(\"role\", \"button\"); // Add ARIA role for accessibility\n        line.setAttribute(\"aria-label\", \"Connection line. Press Delete to remove.\"); // Add ARIA label\n\n\n        line.addEventListener(\"click\", () => {\n            this.removeLine(line);\n        });\n\n        line.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"Delete\" || e.key === \"Backspace\") {\n                e.preventDefault();\n                this.removeLine(line);\n            }\n        });\n\n        return line;\n    }\n\n    removeLine(line) {\n        this.svg.removeChild(line);\n        const index = this.connections.findIndex(conn =>\n            (conn.fromBox === line.fromBox && conn.toBox === line.toBox) ||\n            (conn.fromBox === line.toBox && conn.toBox === line.fromBox)\n        );\n        if (index !== -1) this.connections.splice(index, 1);\n        this.updateConnectionModel();\n    }\n\n    isConnected(a, b) {\n        return this.connections.some(conn =>\n            (conn.fromBox === a && conn.toBox === b) ||\n            (conn.fromBox === b && conn.toBox === a)\n        );\n    }\n\n    createPermanentLine(fromBox, toBox) {\n        const fromRole = fromBox.dataset.role;\n        const toRole = toBox.dataset.role;\n\n        if (fromRole === toRole) {\n            alert(\"You can only connect a draggable to a droppable.\");\n            return;\n        }\n\n        // we should always store connections as drag to drop\n        // even if the user connects drop to drag\n        if (fromBox.dataset.role === \"drop\") {\n            [fromBox, toBox] = [toBox, fromBox];\n        }\n        if (this.isConnected(fromBox, toBox)) return;\n\n        const from = this.getRightBoxCenter(fromBox);\n        const to = this.getLeftBoxCenter(toBox);\n        const line = this.createLineElement(from.x, from.y, to.x, to.y);\n\n        line.fromBox = fromBox;\n        line.toBox = toBox;\n\n        this.svg.appendChild(line);\n        this.connections.push({ fromBox, toBox, line });\n        this.updateConnectionModel();\n\n        if (this.ariaLive) {\n            this.ariaLive.textContent = `Connected ${fromBox.textContent} to ${toBox.textContent}`;\n        }\n    }\n\n    updateConnectionModel() {\n        this.connList.innerHTML = \"<strong>Connections:</strong><br>\";\n        this.connections.forEach(conn => {\n            const fromLabel = conn.fromBox.textContent;\n            let toLabel = conn.toBox.textContent;\n            if (!toLabel) {\n                toLabel = conn.toBox.querySelector(\"img\").alt // innerHTML preserves everything inside <label>…</label>       \n            }\n            const line = document.createElement('div');\n            line.className = 'conn-entry';\n            line.textContent = `${fromLabel} → ${toLabel}`;\n            this.connList.appendChild(line);\n        });\n    }\n\n    /*\n    * This method grades the connections made by the user.\n    * It checks the current answer against the correct answers,\n    * renders feedback, and logs the current answer.\n    * It also updates the local storage with the current state.\n    * It is called when the user clicks the \"Grade\" button.\n    */\n    gradeConnections() {\n        this.checkCurrentAnswer();\n        this.renderFeedback();\n        this.logCurrentAnswer({\n            score: this.scorePercent,\n            correctCount: this.correctCount,\n            incorrectCount: this.incorrectCount,\n            missingCount: this.missingCount,\n            connections: this.connections.map(conn => ({\n                from: conn.fromBox.dataset.id,\n                to: conn.toBox.dataset.id\n            }))\n        });\n        this.setLocalStorage();\n    }\n\n    resetConnections() {\n        this.connections.forEach(conn => {\n            if (conn.line && conn.line.parentNode === this.svg) {\n                this.svg.removeChild(conn.line);\n            }\n        });\n        this.connections.length = 0;\n        this.updateConnectionModel();\n        if (this.ariaLive) this.ariaLive.textContent = \"All connections have been cleared.\";\n    }\n\n    attachEvents() {\n        this.allBoxes.forEach(box => {\n            box.addEventListener(\"mousedown\", e => {\n                if (e.ctrlKey || e.metaKey || true) {\n                    e.preventDefault();\n                    this.startBox = box;\n                    const from = this.getRightBoxCenter(this.startBox);\n                    this.tempLine = this.createLineElement(from.x, from.y, from.x, from.y);\n                    this.tempLine.setAttribute(\"stroke\", \"gray\");\n                    this.tempLine.setAttribute(\"stroke-dasharray\", \"4\");\n                    this.svg.appendChild(this.tempLine);\n\n                    document.addEventListener(\"mousemove\", this.updateTempLine);\n                    document.addEventListener(\"mouseup\", this.finishConnection);\n                }\n            });\n\n            box.addEventListener(\"keydown\", e => {\n                if (e.key === \"Enter\") {\n                    e.preventDefault();\n                    if (!this.selectedBox) {\n                        this.selectedBox = box;\n                        box.classList.add(\"selected\");\n                    } else {\n                        if (box !== this.selectedBox) this.createPermanentLine(this.selectedBox, box);\n                        this.selectedBox.classList.remove(\"selected\");\n                        this.selectedBox = null;\n                        const currentIndex = this.allBoxes.indexOf(box);\n                        const next = this.allBoxes[currentIndex + 1];\n                        if (next) next.focus();\n                        else this.allBoxes[0].focus();\n                    }\n                }\n            });\n\n            box.addEventListener(\"mouseenter\", () => {\n                this.connections.forEach(conn => {\n                    if (conn.fromBox === box || conn.toBox === box) {\n                        conn.line.classList.add(\"highlighted\");\n                        conn.line.classList.remove(\"faded\");\n                    } else {\n                        conn.line.classList.add(\"faded\");\n                        conn.line.classList.remove(\"highlighted\");\n                    }\n                });\n            });\n\n            box.addEventListener(\"mouseleave\", () => {\n                this.connections.forEach(conn => {\n                    conn.line.classList.remove(\"highlighted\", \"faded\");\n                });\n            });\n        });\n\n        const gradeBtn = this.containerDiv.querySelector('.grade-button');\n        const resetBtn = this.containerDiv.querySelector('.reset-button');\n        if (gradeBtn) gradeBtn.addEventListener('click', () => this.gradeConnections());\n        if (resetBtn) resetBtn.addEventListener('click', () => this.resetConnections());\n\n        window.addEventListener(\"resize\", () => {\n            this.connections.forEach(conn => {\n                const from = this.getRightBoxCenter(conn.fromBox);\n                const to = this.getLeftBoxCenter(conn.toBox);\n                conn.line.setAttribute(\"x1\", from.x);\n                conn.line.setAttribute(\"y1\", from.y);\n                conn.line.setAttribute(\"x2\", to.x);\n                conn.line.setAttribute(\"y2\", to.y);\n            });\n        });\n    }\n\n    updateTempLine = (e) => {\n        if (!this.startBox || !this.tempLine) return;\n        const from = this.getRightBoxCenter(this.startBox);\n        this.tempLine.setAttribute(\"x1\", from.x);\n        this.tempLine.setAttribute(\"y1\", from.y);\n        const containerRect = this.workspace.getBoundingClientRect();\n        const x = e.clientX - containerRect.left;\n        const y = e.clientY - containerRect.top;\n\n        this.tempLine.setAttribute(\"x2\", x);\n        this.tempLine.setAttribute(\"y2\", y);\n    };\n\n    finishConnection = (e) => {\n        if (this.tempLine) {\n            this.svg.removeChild(this.tempLine);\n            this.tempLine = null;\n        }\n\n        const endBox = this.allBoxes.find(box => box.contains(e.target) && box !== this.startBox);\n        if (this.startBox && endBox) this.createPermanentLine(this.startBox, endBox);\n\n        this.startBox = null;\n        document.removeEventListener(\"mousemove\", this.updateTempLine);\n        document.removeEventListener(\"mouseup\", this.finishConnection);\n    }\n}\n\n\n\n\n// Register the component with Runestone \ndocument.addEventListener(\"runestone:login-complete\", () => {\n    document.querySelectorAll('[data-component=\"matching\"]').forEach(container => {\n        const script = container.querySelector('script');\n        if (script) {\n            let boxData;\n            try {\n                if (script.type == 'text/xml') {\n                    const xml = script.textContent;\n                    //const json = convert.xml2json(xml, { compact: true, spaces: 4 });\n                    //boxData = JSON.parse(json);\n                    //boxData = simplifyJson(boxData.all);\n                    boxData = xmlToJson(xml);\n                } else {\n                    boxData = JSON.parse(script.textContent);\n                }\n                let opts = {};\n                window.componentMap[container.id] = new MatchingProblem(container, boxData, opts);\n            } catch (err) {\n                console.error(\"Failed to parse boxData JSON:\", err);\n            }\n        }\n    });\n});","export function xmlToJson(xmlString) {\n  // 1) Parse the XML string\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(xmlString, 'application/xml');\n  const err = doc.querySelector('parsererror');\n  if (err) {\n    throw new Error('XML parse error: ' + err.textContent);\n  }\n\n  // 2) Helper to extract [ { id, label }, … ] from <premise> or <response>\n  function itemsFrom(tagName) {\n    return Array.from(doc.querySelectorAll(tagName))\n      .map(el => {\n        const idEl = el.querySelector('id');\n        const labelEl = el.querySelector('label');\n        return {\n          id: idEl ? idEl.textContent.trim() : '',\n          // innerHTML preserves any markup inside the label\n          label: labelEl ? labelEl.innerHTML.trim() : ''\n        };\n      });\n  }\n\n  // 3) Helper to build [ [p, r], [p, r], … ]\n  function correctAnswersFrom() {\n    return Array.from(doc.querySelectorAll('edge'))\n      .map(edgeEl => {\n        const labs = Array.from(edgeEl.querySelectorAll('label'));\n        // take first two <label> children as the pair\n        return labs.slice(0, 2).map(l => l.textContent.trim());\n      });\n  }\n\n  function getStatement() {\n    const statementEl = doc.querySelector('statement');\n    if (statementEl) {\n      return statementEl.innerHTML.trim();\n    }\n    return '';\n  }\n\n  function getFeedback() {\n    const feedbackEl = doc.querySelector('feedback');\n    if (feedbackEl) {\n      return feedbackEl.innerHTML.trim();\n    }\n    return '';\n  }\n\n  // 4) Return in { left, right, correctAnswers } shape\n  return {\n    statement: getStatement(),\n    feedback: getFeedback(),\n    left: itemsFrom('premise'),\n    right: itemsFrom('response'),\n    correctAnswers: correctAnswersFrom()\n  };\n}\n"],"names":["MatchingProblem","constructor","container","boxData","opts","super","this","containerDiv","divid","id","boxesRenderedPromise","Promise","resolve","boxesRenderedResolve","workspace","createWorkspace","statement","createStatement","connList","createConnList","ariaLive","createAriaLive","controlDiv","createControlDiv","createHelpModal","connections","allBoxes","selectedBox","startBox","tempLine","useRunestoneServices","eBookConfig","graderactive","init","then","checkServer","shuffle","left","right","renderBoxes","attachEvents","window","MathJax","typesetPromise","checkCurrentAnswer","correctAnswers","actual","map","conn","fromBox","dataset","toBox","correctMatches","filter","expected","some","given","incorrectConnections","correctCount","length","incorrectCount","missingCount","denominator","scorePercent","Math","max","min","round","logCurrentAnswer","eventData","event","div_id","act","score","JSON","stringify","correct","answer","logBookEvent","renderFeedback","forEach","idPair","isCorrect","line","classList","remove","add","innerHTML","feedback","document","createElement","className","insertBefore","firstChild","restoreAnswers","data","find","box","from","to","updateConnectionModel","getRightBoxCenter","getLeftBoxCenter","createLineElement","x","y","svg","appendChild","checkLocalStorage","localStorage","getItem","parsedData","parse","setLocalStorage","setItem","disableInteraction","leftColumn","createElementNS","rightColumn","setAttribute","gradeBtn","textContent","resetBtn","helpBtn","addEventListener","gradeConnections","resetConnections","showHelp","helpModal","querySelector","hideHelp","style","display","array","i","j","floor","random","label","createBox","push","imgs","Array","querySelectorAll","imgPromises","img","decode","complete","naturalWidth","all","role","div","tabIndex","getCenter","el","elRect","getBoundingClientRect","containerRect","width","top","height","x1","y1","x2","y2","removeLine","e","key","preventDefault","removeChild","index","findIndex","splice","isConnected","a","b","createPermanentLine","alert","fromLabel","toLabel","alt","parentNode","ctrlKey","metaKey","updateTempLine","finishConnection","currentIndex","indexOf","next","focus","clientX","clientY","endBox","contains","target","removeEventListener","script","type","xmlString","doc","DOMParser","parseFromString","err","Error","itemsFrom","tagName","idEl","labelEl","trim","statementEl","getStatement","feedbackEl","getFeedback","edgeEl","slice","l","xmlToJson","componentMap","console","error"],"sourceRoot":""}