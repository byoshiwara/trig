{"version":3,"file":"566.js","mappings":"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","sources":["webpack://WebComponents/./runestone/matching/js/matching.js","webpack://WebComponents/./runestone/matching/js/xmlconversion.js"],"sourcesContent":["import RunestoneBase from \"../../common/js/runestonebase.js\";\nimport \"../css/matching.less\";\nimport { xmlToJson } from \"./xmlconversion.js\";\nclass MatchingProblem extends RunestoneBase {\n    constructor(container, boxData, opts) {\n        super({})\n        this.containerDiv = container;\n        this.divid = container.id;\n        this.boxData = boxData;\n        this.boxesRenderedPromise = new Promise((resolve) => {\n            this.boxesRenderedResolve = resolve;\n        });\n        this.workspace = this.createWorkspace(container);\n        this.connList = this.createConnList(container);\n        this.ariaLive = this.createAriaLive(container);\n        this.controlDiv = this.createControlDiv(container);\n\n        this.connections = [];\n        this.allBoxes = [];\n        this.selectedBox = null;\n        this.startBox = null;\n        this.tempLine = null;\n        this.useRunestoneServices = eBookConfig.useRunestoneServices;\n        this.graderactive = opts.graderactive || false;\n        this.init();\n        // ensure that boxes are rendered before checking server\n        // if boxes are not rendered then we may have dangling lines\n        // that are not connected to any boxes\n        this.boxesRenderedPromise.then(() => {\n            this.checkServer(\"matching\", true);\n        });\n    }\n\n    init() {\n        this.shuffle(this.boxData.left);\n        this.shuffle(this.boxData.right);\n\n        this.renderBoxes();\n        this.attachEvents();\n\n        if (window.MathJax && MathJax.typesetPromise) {\n            MathJax.typesetPromise();\n        }\n    }\n\n    // required elements for a Runestone component\n\n    checkCurrentAnswer() {\n        const correctAnswers = this.boxData.correctAnswers;\n        const actual = this.connections.map(conn => [\n            conn.fromBox.dataset.id,\n            conn.toBox.dataset.id\n        ]);\n\n        const correctMatches = correctAnswers.filter(expected =>\n            actual.some(given => given[0] === expected[0] && given[1] === expected[1])\n        );\n\n        const incorrectConnections = actual.filter(given =>\n            !correctAnswers.some(expected => expected[0] === given[0] && expected[1] === given[1])\n        );\n\n        this.correctCount = correctMatches.length;\n        this.incorrectCount = incorrectConnections.length;\n        this.missingCount = correctAnswers.length - this.correctCount;\n        this.denominator = this.correctCount + this.incorrectCount + this.missingCount;\n        this.scorePercent = this.denominator === 0 ? 0 : Math.max(0, Math.min(100, Math.round((this.correctCount / this.denominator) * 100)));\n\n    }\n\n    async logCurrentAnswer(eventData) {\n        eventData.event = \"matching\";\n        eventData.div_id = this.divid;\n        eventData.act = `score:${eventData.score} connections:${JSON.stringify(eventData.connections)}`;\n        eventData.correct = eventData.score === 100;\n        eventData.answer = JSON.stringify({ connections: eventData.connections });\n\n        await this.logBookEvent(eventData);\n\n    }\n\n    renderFeedback() {\n        this.connections.forEach(conn => {\n            const idPair = [conn.fromBox.dataset.id, conn.toBox.dataset.id];\n            const isCorrect = this.boxData.correctAnswers.some(expected =>\n                expected[0] === idPair[0] && expected[1] === idPair[1]\n            );\n            conn.line.classList.remove(\"correct\", \"incorrect\");\n            conn.line.classList.add(isCorrect ? \"correct\" : \"incorrect\");\n        });\n\n        this.connList.innerHTML = `<strong>Score: ${this.scorePercent}%</strong>`;\n    }\n\n    restoreAnswers(data) {\n        // Recreate lines\n        if (data) {\n            this.connections = data.answer.connections.map(conn => ({\n                fromBox: this.allBoxes.find(box => box.dataset.id === conn.from),\n                toBox: this.allBoxes.find(box => box.dataset.id === conn.to)\n            }));\n            this.updateConnectionModel();\n            this.correct = data.correct;\n        }\n        this.connections.forEach(conn => {\n            const from = this.getCenter(conn.fromBox);\n            const to = this.getCenter(conn.toBox);\n            const line = this.createLineElement(from.x, from.y, to.x, to.y);\n            line.fromBox = conn.fromBox;\n            line.toBox = conn.toBox;\n            this.svg.appendChild(line);\n            conn.line = line;\n        });\n\n    }\n    checkLocalStorage() {\n        if (this.graderactive) {\n            return;\n        }\n        const data = localStorage.getItem(this.divid);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            this.connections = parsedData.connections.map(conn => ({\n                fromBox: this.allBoxes.find(box => box.dataset.id === conn.from),\n                toBox: this.allBoxes.find(box => box.dataset.id === conn.to)\n            }));\n            this.updateConnectionModel();\n            this.correctCount = parsedData.correctCount;\n            this.incorrectCount = parsedData.incorrectCount;\n            this.missingCount = parsedData.missingCount;\n            this.scorePercent = parsedData.score;\n            this.restoreAnswers();\n            this.renderFeedback();\n        }\n    }\n    setLocalStorage() {\n        const data = {\n            connections: this.connections.map(conn => ({\n                from: conn.fromBox.dataset.id,\n                to: conn.toBox.dataset.id\n            })),\n            score: this.scorePercent,\n            correctCount: this.correctCount,\n            incorrectCount: this.incorrectCount,\n            missingCount: this.missingCount\n        };\n        localStorage.setItem(this.divid, JSON.stringify(data));\n    }\n\n    disableInteraction() { }\n\n    createWorkspace(container) {\n        const workspace = document.createElement('div');\n        workspace.className = 'matching-workspace';\n\n        const leftColumn = document.createElement('div');\n        leftColumn.className = 'left-column';\n        this.leftColumn = leftColumn;\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svg.classList.add('connector-svg');\n        this.svg = svg;\n\n        const rightColumn = document.createElement('div');\n        rightColumn.className = 'right-column';\n        this.rightColumn = rightColumn;\n        workspace.appendChild(leftColumn);\n        workspace.appendChild(svg);\n        workspace.appendChild(rightColumn);\n\n        container.insertBefore(workspace, container.firstChild);\n        return workspace;\n    }\n\n    createConnList(container) {\n        const connList = document.createElement('div');\n        connList.className = 'conn-list';\n        connList.innerHTML = \"<strong>Connections:</strong><br>\";\n        container.appendChild(connList);\n        return connList;\n    }\n\n    createAriaLive(container) {\n        const ariaLive = document.createElement('div');\n        ariaLive.className = 'aria-live';\n        ariaLive.setAttribute('aria-live', 'polite');\n        ariaLive.setAttribute('aria-atomic', 'true');\n        container.appendChild(ariaLive);\n        return ariaLive;\n    }\n\n    createControlDiv(container) {\n        const controlDiv = document.createElement('div');\n        controlDiv.className = 'control-div';\n        const gradeBtn = document.createElement('button');\n        gradeBtn.className = 'grade-button';\n        gradeBtn.textContent = 'Grade';\n        const resetBtn = document.createElement('button');\n        resetBtn.className = 'reset-button';\n        resetBtn.textContent = 'Reset';\n        controlDiv.appendChild(gradeBtn);\n        controlDiv.appendChild(resetBtn);\n        container.appendChild(controlDiv);\n        return controlDiv;\n    }\n\n    // Utility functions\n    shuffle(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array;\n    }\n\n    renderBoxes() {\n        this.boxData.left.forEach(({ id, label }) => {\n            const box = this.createBox(id, label, \"drag\");\n            this.leftColumn.appendChild(box);\n            this.allBoxes.push(box);\n        });\n\n        this.boxData.right.forEach(({ id, label }) => {\n            const box = this.createBox(id, label, \"drop\");\n            this.rightColumn.appendChild(box);\n            this.allBoxes.push(box);\n        });\n\n        const imgs = Array.from(this.workspace.querySelectorAll('img'));\n        if (imgs.length === 0) {\n            this.boxesRenderedResolve();\n        }\n        // Wait for all images to load before resolving the promise\n        const imgPromises = imgs.map(img => {\n            if (typeof img.decode === 'function') {\n                return img.decode();\n            }\n            if (img.complete && img.naturalWidth !== 0) {\n                return Promise.resolve();\n            }\n            return new Promise((resolve) => {\n                img.addEventListener('load', () => resolve());\n                img.addEventListener('error', () => resolve());\n            });\n        });\n\n        Promise.all(imgPromises).then(() => {\n            this.boxesRenderedResolve();\n        });\n    }\n\n    createBox(id, label, role) {\n        const div = document.createElement('div');\n        div.className = 'box';\n        div.dataset.id = id;\n        div.dataset.role = role;\n        div.innerHTML = label;\n        div.tabIndex = 0;\n        div.setAttribute('role', 'button');\n        div.setAttribute('aria-label', `${role === \"drag\" ? \"Draggable\" : \"Droppable\"}: ${label}`);\n        return div;\n    }\n\n    getCenter(el) {\n        const elRect = el.getBoundingClientRect();\n        const containerRect = this.workspace.getBoundingClientRect();\n        return {\n            x: elRect.left - containerRect.left + elRect.width / 2,\n            y: elRect.top - containerRect.top + elRect.height / 2\n        };\n    }\n    createLineElement(x1, y1, x2, y2) {\n        const line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\");\n        line.setAttribute(\"x1\", x1);\n        line.setAttribute(\"y1\", y1);\n        line.setAttribute(\"x2\", x2);\n        line.setAttribute(\"y2\", y2);\n        line.setAttribute(\"class\", \"line\");\n        line.setAttribute(\"tabindex\", \"0\"); // Make the line focusable\n        line.setAttribute(\"role\", \"button\"); // Add ARIA role for accessibility\n        line.setAttribute(\"aria-label\", \"Connection line. Press Delete to remove.\"); // Add ARIA label\n\n\n        line.addEventListener(\"click\", () => {\n            this.removeLine(line);\n        });\n\n        line.addEventListener(\"keydown\", (e) => {\n            if (e.key === \"Delete\" || e.key === \"Backspace\") {\n                e.preventDefault();\n                this.removeLine(line);\n            }\n        });\n\n        return line;\n    }\n\n    removeLine(line) {\n        this.svg.removeChild(line);\n        const index = this.connections.findIndex(conn =>\n            (conn.fromBox === line.fromBox && conn.toBox === line.toBox) ||\n            (conn.fromBox === line.toBox && conn.toBox === line.fromBox)\n        );\n        if (index !== -1) this.connections.splice(index, 1);\n        this.updateConnectionModel();\n    }\n\n    isConnected(a, b) {\n        return this.connections.some(conn =>\n            (conn.fromBox === a && conn.toBox === b) ||\n            (conn.fromBox === b && conn.toBox === a)\n        );\n    }\n\n    createPermanentLine(fromBox, toBox) {\n        const fromRole = fromBox.dataset.role;\n        const toRole = toBox.dataset.role;\n\n        if (fromRole === toRole) {\n            alert(\"You can only connect a draggable to a droppable.\");\n            return;\n        }\n\n        if (this.isConnected(fromBox, toBox)) return;\n\n        const from = this.getCenter(fromBox);\n        const to = this.getCenter(toBox);\n        const line = this.createLineElement(from.x, from.y, to.x, to.y);\n\n        line.fromBox = fromBox;\n        line.toBox = toBox;\n\n        this.svg.appendChild(line);\n        this.connections.push({ fromBox, toBox, line });\n        this.updateConnectionModel();\n\n        if (this.ariaLive) {\n            this.ariaLive.textContent = `Connected ${fromBox.textContent} to ${toBox.textContent}`;\n        }\n    }\n\n    updateConnectionModel() {\n        this.connList.innerHTML = \"<strong>Connections:</strong><br>\";\n        this.connections.forEach(conn => {\n            const fromLabel = conn.fromBox.textContent;\n            let toLabel = conn.toBox.textContent;\n            if (!toLabel) {\n                toLabel = conn.toBox.querySelector(\"img\").alt // innerHTML preserves everything inside <label>…</label>       \n            }\n            const line = document.createElement('div');\n            line.className = 'conn-entry';\n            line.textContent = `${fromLabel} → ${toLabel}`;\n            this.connList.appendChild(line);\n        });\n    }\n\n    /*\n    * This method grades the connections made by the user.\n    * It checks the current answer against the correct answers,\n    * renders feedback, and logs the current answer.\n    * It also updates the local storage with the current state.\n    * It is called when the user clicks the \"Grade\" button.\n    */\n    gradeConnections() {\n        this.checkCurrentAnswer();\n        this.renderFeedback();\n        this.logCurrentAnswer({\n            score: this.scorePercent,\n            correctCount: this.correctCount,\n            incorrectCount: this.incorrectCount,\n            missingCount: this.missingCount,\n            connections: this.connections.map(conn => ({\n                from: conn.fromBox.dataset.id,\n                to: conn.toBox.dataset.id\n            }))\n        });\n        this.setLocalStorage();\n    }\n\n    resetConnections() {\n        this.connections.forEach(conn => {\n            if (conn.line && conn.line.parentNode === this.svg) {\n                this.svg.removeChild(conn.line);\n            }\n        });\n        this.connections.length = 0;\n        this.updateConnectionModel();\n        if (this.ariaLive) this.ariaLive.textContent = \"All connections have been cleared.\";\n    }\n\n    attachEvents() {\n        this.allBoxes.forEach(box => {\n            box.addEventListener(\"mousedown\", e => {\n                if (e.ctrlKey || e.metaKey) {\n                    e.preventDefault();\n                    this.startBox = box;\n                    const from = this.getCenter(this.startBox);\n                    this.tempLine = this.createLineElement(from.x, from.y, from.x, from.y);\n                    this.tempLine.setAttribute(\"stroke\", \"gray\");\n                    this.tempLine.setAttribute(\"stroke-dasharray\", \"4\");\n                    this.svg.appendChild(this.tempLine);\n\n                    document.addEventListener(\"mousemove\", this.updateTempLine);\n                    document.addEventListener(\"mouseup\", this.finishConnection);\n                }\n            });\n\n            box.addEventListener(\"keydown\", e => {\n                if (e.key === \"Enter\") {\n                    e.preventDefault();\n                    if (!this.selectedBox) {\n                        this.selectedBox = box;\n                        box.classList.add(\"selected\");\n                    } else {\n                        if (box !== this.selectedBox) this.createPermanentLine(this.selectedBox, box);\n                        this.selectedBox.classList.remove(\"selected\");\n                        this.selectedBox = null;\n                        const currentIndex = this.allBoxes.indexOf(box);\n                        const next = this.allBoxes[currentIndex + 1];\n                        if (next) next.focus();\n                        else this.allBoxes[0].focus();\n                    }\n                }\n            });\n\n            box.addEventListener(\"mouseenter\", () => {\n                this.connections.forEach(conn => {\n                    if (conn.fromBox === box || conn.toBox === box) {\n                        conn.line.classList.add(\"highlighted\");\n                        conn.line.classList.remove(\"faded\");\n                    } else {\n                        conn.line.classList.add(\"faded\");\n                        conn.line.classList.remove(\"highlighted\");\n                    }\n                });\n            });\n\n            box.addEventListener(\"mouseleave\", () => {\n                this.connections.forEach(conn => {\n                    conn.line.classList.remove(\"highlighted\", \"faded\");\n                });\n            });\n        });\n\n        const gradeBtn = this.containerDiv.querySelector('.grade-button');\n        const resetBtn = this.containerDiv.querySelector('.reset-button');\n        if (gradeBtn) gradeBtn.addEventListener('click', () => this.gradeConnections());\n        if (resetBtn) resetBtn.addEventListener('click', () => this.resetConnections());\n\n        window.addEventListener(\"resize\", () => {\n            this.connections.forEach(conn => {\n                const from = this.getCenter(conn.fromBox);\n                const to = this.getCenter(conn.toBox);\n                conn.line.setAttribute(\"x1\", from.x);\n                conn.line.setAttribute(\"y1\", from.y);\n                conn.line.setAttribute(\"x2\", to.x);\n                conn.line.setAttribute(\"y2\", to.y);\n            });\n        });\n    }\n\n    updateTempLine = (e) => {\n        if (!this.startBox || !this.tempLine) return;\n        const from = this.getCenter(this.startBox);\n        this.tempLine.setAttribute(\"x1\", from.x);\n        this.tempLine.setAttribute(\"y1\", from.y);\n        const containerRect = this.workspace.getBoundingClientRect();\n        const x = e.clientX - containerRect.left;\n        const y = e.clientY - containerRect.top;\n\n        this.tempLine.setAttribute(\"x2\", x);\n        this.tempLine.setAttribute(\"y2\", y);\n    };\n\n    finishConnection = (e) => {\n        if (this.tempLine) {\n            this.svg.removeChild(this.tempLine);\n            this.tempLine = null;\n        }\n\n        const endBox = this.allBoxes.find(box => box.contains(e.target) && box !== this.startBox);\n        if (this.startBox && endBox) this.createPermanentLine(this.startBox, endBox);\n\n        this.startBox = null;\n        document.removeEventListener(\"mousemove\", this.updateTempLine);\n        document.removeEventListener(\"mouseup\", this.finishConnection);\n    }\n}\n\n\n\n\n// Register the component with Runestone \ndocument.addEventListener(\"runestone:login-complete\", () => {\n    document.querySelectorAll('[data-component=\"matching\"]').forEach(container => {\n        const script = container.querySelector('script');\n        if (script) {\n            let boxData;\n            try {\n                if (script.type == 'text/xml') {\n                    const xml = script.textContent;\n                    //const json = convert.xml2json(xml, { compact: true, spaces: 4 });\n                    //boxData = JSON.parse(json);\n                    //boxData = simplifyJson(boxData.all);\n                    boxData = xmlToJson(xml);\n                } else {\n                    boxData = JSON.parse(script.textContent);\n                }\n                let opts = {};\n                window.componentMap[container.id] = new MatchingProblem(container, boxData, opts);\n            } catch (err) {\n                console.error(\"Failed to parse boxData JSON:\", err);\n            }\n        }\n    });\n});","export function xmlToJson(xmlString) {\n    // 1) Parse the XML string\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(xmlString, 'application/xml');\n    const err = doc.querySelector('parsererror');\n    if (err) {\n      throw new Error('XML parse error: ' + err.textContent);\n    }\n  \n    // 2) Helper to extract [ { id, label }, … ] from <premise> or <response>\n    function itemsFrom(tagName) {\n      return Array.from(doc.querySelectorAll(tagName))\n        .map(el => {\n          const idEl    = el.querySelector('id');\n          const labelEl = el.querySelector('label');\n          return {\n            id:    idEl    ? idEl.textContent.trim() : '',\n            // innerHTML preserves any markup inside the label\n            label: labelEl ? labelEl.innerHTML.trim() : ''\n          };\n        });\n    }\n  \n    // 3) Helper to build [ [p, r], [p, r], … ]\n    function correctAnswersFrom() {\n      return Array.from(doc.querySelectorAll('edge'))\n        .map(edgeEl => {\n          const labs = Array.from(edgeEl.querySelectorAll('label'));\n          // take first two <label> children as the pair\n          return labs.slice(0, 2).map(l => l.textContent.trim());\n        });\n    }\n  \n    // 4) Return in { left, right, correctAnswers } shape\n    return {\n      left:           itemsFrom('premise'),\n      right:          itemsFrom('response'),\n      correctAnswers: correctAnswersFrom()\n    };\n  }\n  "],"names":["MatchingProblem","constructor","container","boxData","opts","super","this","containerDiv","divid","id","boxesRenderedPromise","Promise","resolve","boxesRenderedResolve","workspace","createWorkspace","connList","createConnList","ariaLive","createAriaLive","controlDiv","createControlDiv","connections","allBoxes","selectedBox","startBox","tempLine","useRunestoneServices","eBookConfig","graderactive","init","then","checkServer","shuffle","left","right","renderBoxes","attachEvents","window","MathJax","typesetPromise","checkCurrentAnswer","correctAnswers","actual","map","conn","fromBox","dataset","toBox","correctMatches","filter","expected","some","given","incorrectConnections","correctCount","length","incorrectCount","missingCount","denominator","scorePercent","Math","max","min","round","logCurrentAnswer","eventData","event","div_id","act","score","JSON","stringify","correct","answer","logBookEvent","renderFeedback","forEach","idPair","isCorrect","line","classList","remove","add","innerHTML","restoreAnswers","data","find","box","from","to","updateConnectionModel","getCenter","createLineElement","x","y","svg","appendChild","checkLocalStorage","localStorage","getItem","parsedData","parse","setLocalStorage","setItem","disableInteraction","document","createElement","className","leftColumn","createElementNS","rightColumn","insertBefore","firstChild","setAttribute","gradeBtn","textContent","resetBtn","array","i","j","floor","random","label","createBox","push","imgs","Array","querySelectorAll","imgPromises","img","decode","complete","naturalWidth","addEventListener","all","role","div","tabIndex","el","elRect","getBoundingClientRect","containerRect","width","top","height","x1","y1","x2","y2","removeLine","e","key","preventDefault","removeChild","index","findIndex","splice","isConnected","a","b","createPermanentLine","alert","fromLabel","toLabel","querySelector","alt","gradeConnections","resetConnections","parentNode","ctrlKey","metaKey","updateTempLine","finishConnection","currentIndex","indexOf","next","focus","clientX","clientY","endBox","contains","target","removeEventListener","script","type","xmlString","doc","DOMParser","parseFromString","err","Error","itemsFrom","tagName","idEl","labelEl","trim","edgeEl","slice","l","xmlToJson","componentMap","console","error"],"sourceRoot":""}